// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/pivotal-cf/om/download_clients"
)

type FakeAWSS3Client struct {
	GetObjectStub        func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.Options)
	}
	getObjectReturns struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	ListObjectsV2Stub        func(context.Context, *s3.ListObjectsV2Input, ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)
	listObjectsV2Mutex       sync.RWMutex
	listObjectsV2ArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []func(*s3.Options)
	}
	listObjectsV2Returns struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	listObjectsV2ReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAWSS3Client) GetObject(arg1 context.Context, arg2 *s3.GetObjectInput, arg3 ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetObject", []interface{}{arg1, arg2, arg3})
	fake.getObjectMutex.Unlock()
	if fake.GetObjectStub != nil {
		return fake.GetObjectStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAWSS3Client) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *FakeAWSS3Client) GetObjectCalls(stub func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *FakeAWSS3Client) GetObjectArgsForCall(i int) (context.Context, *s3.GetObjectInput, []func(*s3.Options)) {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	argsForCall := fake.getObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAWSS3Client) GetObjectReturns(result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSS3Client) GetObjectReturnsOnCall(i int, result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectOutput
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSS3Client) ListObjectsV2(arg1 context.Context, arg2 *s3.ListObjectsV2Input, arg3 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	fake.listObjectsV2Mutex.Lock()
	ret, specificReturn := fake.listObjectsV2ReturnsOnCall[len(fake.listObjectsV2ArgsForCall)]
	fake.listObjectsV2ArgsForCall = append(fake.listObjectsV2ArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListObjectsV2", []interface{}{arg1, arg2, arg3})
	fake.listObjectsV2Mutex.Unlock()
	if fake.ListObjectsV2Stub != nil {
		return fake.ListObjectsV2Stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listObjectsV2Returns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAWSS3Client) ListObjectsV2CallCount() int {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	return len(fake.listObjectsV2ArgsForCall)
}

func (fake *FakeAWSS3Client) ListObjectsV2Calls(stub func(context.Context, *s3.ListObjectsV2Input, ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = stub
}

func (fake *FakeAWSS3Client) ListObjectsV2ArgsForCall(i int) (context.Context, *s3.ListObjectsV2Input, []func(*s3.Options)) {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	argsForCall := fake.listObjectsV2ArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAWSS3Client) ListObjectsV2Returns(result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	fake.listObjectsV2Returns = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSS3Client) ListObjectsV2ReturnsOnCall(i int, result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	if fake.listObjectsV2ReturnsOnCall == nil {
		fake.listObjectsV2ReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsV2Output
			result2 error
		})
	}
	fake.listObjectsV2ReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSS3Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAWSS3Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ download_clients.AWSS3Client = new(FakeAWSS3Client)
